#!/usr/bin/env direnv

# Check if we have nix-direnv; if not, bootstrap it into our environment.
# nixpkgs does not necessarily have the newest version, so we inject the latest (as of 3/29)
# locked direnvrc.
if ! has nix_direnv_version || ! nix_direnv_version 3.0.4; then
    source_url "https://raw.githubusercontent.com/nix-community/nix-direnv/3.0.4/direnvrc" "sha256-DzlYZ33mWF/Gs8DDeyjr8mnVmQGx7ASYqA5WlxwvBG4="
fi

# Add all the source code prior to registering the nix-direnv bindings.
TOP="$PWD"
watch_file "$(find "$TOP" -name "*.nix" -printf '"%p" ')"

# direnv loads the flake, evaluates the development environment declared by the devShell, and
# creates the environment in a subshell.

# In order to ensure absolute purity of the environment, we then hand this off to nix-direnv.
# nix-direnv then uses the environment impurely as a cache to re-evaluate the flake and determine
# if the development environment needs to be reloaded. So the initial
use flake "$TOP"

# We can expect $shellHook to be populated if we pulled it from this repository.
# It was parsed out from the flake.
if [[ -n "${IN_NIX_SHELL:-}" ]] && [[ -n "${shellHook:-}" ]]; then
  eval "$shellHook"
fi
